<== Anotações provisórias até que eu entenda completamente todo o funcionamento ==>
#Context API and Provider:

  Um Context API se baseia em um provider e em um consumer, onde o provider vai ser responsável por prover o global state que toda a aplicação poderá usar. Esse provider deve ser importado dentro do módulo principal da aplicação (no caso do exercío no App.js). Será usado de modo a envolver todo o conteúdo da aplicação.

  Já o consumer deverá ser importado no componente, também englobando dentro do return do render todo o conteúdo que será exibido, de modo a usar o que o state que o provider está disponibilizando através do valor exportado.

  Na contrução do context é chamado o método React.createContext de modo a ter acesso aos métodos Provider e Consumer, que será configurados para retornar o state (que guardará toda a informação que se queira disponibilizar para toda a aplicação) e o Consumer (que disponibilizará quaisquer informação contida no provider). Sua estrutura é de uma classe exportável que extende Component e, na importação, deverá ser usada dentro do render do componente de forma a returnar uma expressão (exemplo abaixo) onde fará todo o tratamento do componente.

  Exemplo da estrutura de criação do context.js

  import React, {Component} from 'reac';

  const Context = React.createContext();

  //Será importado dentro do arquivo principal da aplicação, para ter acesso ao global state e suas propriedades, disponíveis através da propriedade "value" (no caso do exemplo abaixo)
  export class Provider extends Component {
    state = {
      //todo o conteúdo que deseja disponibilizar
    }

    render () {
      return (
        <Context.Provider value={this.state} >
          {this.props.children}
        </Context.Provider>
      )
    }
  }

  //Será importado nos componentes que quiserem consumer o global state
  export const Consumer = Context.Consumer

  //Exemplo de uso do Consumer (considerando o exemplo deste projeto)
  <Consumer>
    return (
      {value => {
          aqui virá todo o tratamento necessário do componente, considerando que nesse caso deverá considerar que todas as propriedades estarão guardadas dentro de value.
        }
      }
    )
  </Consumer>

  Anotações para impletação da aula 25 e 26:
    Ao fazer isso todos os bind de cliques criados que se baseiem no state que estava sendo guardado em Contacts.js deverá ser refeito, considerando que agora essa informação estará no global state.
    Deve ser criada uma função dentro do context.js que retornará diferentes ações de acordo com o respectivo parâmetro passado (na aula ele usa o switch, recebendo como parâmetro o tipo da ação, que é uma string, mas também pode ser usado if e else ou ainda o próprio método reducer do ES6, que ele indica ser usado em aplicações muito grandes. No caso do switch, por padrão ele retorna o state inteiro e na ação que tem uma opção de deletar ele retorna os contatos filtrados, comparando o id do contato com uma das propriedades que serão passadas no objeto "action").
    Dessa forma não será necessário o bind sendo passado via props entre componentes até a aplicação principal, para manipular o global state. No caso ele chama de reducer passando o state e a action como parâmetros, que serão passados como objetos.
    Esse reducer é inserido no global state com a chave "dispatch" recebendo como value uma arrow function tendo action como parâmetro que retorna a manipulação de state (this.setState) que recebe uma nova arrow function tendo como parâmetro state e retorna o reducer, que por sua vez usa o state e o action como parâmetros. Para melhor ilustrar segue abaixo a estrutura mencionada:
      state = {
        ...,
        dispatch: action => this.setState(state => reducer(state, action))
      }
    Por fim, no onClick do elemento que deverá executar uma ação, é feito o bind para o método que executará a ação do componente (delete, por exemplo), passando o dispatch como parâmetro que por sua vez será chamado dentro da execução do delete de forma que dispatch receberá por exemplo {type: DELETE_CONTACT, payload: id}.